##### Additional Code #####

# Note: This script is pretty disorganized and contains half-baked code or highly-specific ideas

##### COMPLEX DIAGNOSTIC

################# Test Correlation Between predict and true for DIFFERENT parameters -- should have NONE! #########

# beta_max = 10
# plot_param_recovery_analysis(true_beta, predict_alpha_pos, "Predicted Alpha Pos vs. True Beta", 
#                              xlabel = "True Beta", ylabel = "Predicted Alpha Positive", xmax = beta_max)
# plot_param_recovery_analysis(true_beta, predict_alpha_neg, "Predicted Alpha Neg vs. True Beta", 
#                              xlabel = "True Beta", ylabel = "Predicted Alpha Negative", xmax = beta_max)
# plot_param_recovery_analysis(predict_beta, predict_alpha_pos, "Predicted Alpha Pos vs. Predicted Beta", 
#                              xlabel = "Predicted Beta", ylabel = "Predicted Alpha Positive", xmax = beta_max)
# plot_param_recovery_analysis(predict_beta, predict_alpha_neg, "Predicted Alpha Neg vs. Predicted Beta", 
#                              xlabel = "Predicted Beta", ylabel = "Predicted Alpha Negative", xmax = beta_max)
# plot_param_recovery_analysis(predict_alpha_neg, predict_alpha_pos, "Predicted Alpha Pos vs. Predicted Alpha Neg",
#                              xlabel = "Predicted Alpha Negative", ylabel = "Predicted Alpha Positive")

################################### Test Model Fit for Constrained Alpha/Beta Values ##############################

# # Parameter Recovery for RL2a with Beta constrained to [0, 1] bound
# results = param_recovery_diagnostics(np.array([[0, 1], [0, 1], [0, 1]]), RL2a, RL2a_LLH, 3)

# true_beta = results[:, 0, 0]
# true_alpha_pos = results[:, 0, 1]
# true_alpha_neg = results[:, 0, 2]

# # Test Model Fit for Low-Beta/Alpha Entries
# mask = ((true_beta < 0.1) | (true_alpha_pos < 0.1) | (true_alpha_neg < 0.1) | (true_beta > 0.9) | (true_alpha_pos > 0.9) | (true_alpha_neg > 0.9))
# predictions = results[mask, 1, :]
# actual = results[mask, 0, :]
# plot_param_recovery_analysis(predictions[:, 0], actual[:, 0], "Boundary Parameter Values: Beta")
# plot_param_recovery_analysis(predictions[:, 1], actual[:, 1], "Boundary Parameter Values: Alpha Pos")
# plot_param_recovery_analysis(predictions[:, 2], actual[:, 2], "Boundary Parameter Values: Alpha Neg")

# # Test Model Fit for Higher (> 0.1) Beta/Alpha Entries
# predictions = results[~mask, 1, :]
# actual = results[~mask, 0, :]
# plot_param_recovery_analysis(predictions[:, 0], actual[:, 0], "Central Parameter Values: Beta")
# plot_param_recovery_analysis(predictions[:, 1], actual[:, 1], "Central Parameter Values: Alpha Pos")
# plot_param_recovery_analysis(predictions[:, 2], actual[:, 2], "Central Parameter Values: Alpha Neg")


################################## Criterion Performance Visualization #################################

# model_summary_df = pd.DataFrame(np.array([AIC_kids_young, AIC_kids_old, AIC_adults, 
#                                           BIC_kids_young, BIC_kids_old, BIC_adults]), columns = info_model_map)
# model_summary_df.loc[:, "Criterion"] = np.array(["AIC", "AIC", "AIC", "BIC", "BIC", "BIC"])
# model_summary_df.loc[:, "AgeGroup"] = np.array(["Young Kids", "Older Kids", "Adults", "Young Kids", "Older Kids", "Adults"])

### TODO: PIVOT this shit. 
# model_summary_df.loc[:, "Model"] = np.repeat(info_model_map, 3)
# model_summary_df.pivot(columns = ["Criterion", "AgeGroup"], values = info_model_map)
# sns.relplot(
#     data=model_summary_df, kind="line",
#     x="", y="signal", col="region",
#     hue="event", style="event",
# )
# model_summary_df